# Thisx file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# CMAKE_REQUIRE_LARGE_FILE_SUPPORT
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set CMAKE_REQUIRE_LARGE_FILE_SUPPORT to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# CMAKE_REQUIRE_LARGE_FILE_SUPPORT__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set CMAKE_REQUIRE_LARGE_FILE_SUPPORT__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_CMAKE_REQUIRE_LARGE_FILE_SUPPORT variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/CMakeTmp/src.cxx
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec2078567072-CMAKE_REQUIRE_LARGE_FILE_SUPPORT
# Run arguments :
#    Called from: [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMakeLists.txt

SET( CMAKE_REQUIRE_LARGE_FILE_SUPPORT
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( CMAKE_REQUIRE_LARGE_FILE_SUPPORT__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VTK_TYPE_CHAR_IS_SIGNED
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VTK_TYPE_CHAR_IS_SIGNED to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The VTK_TYPE_CHAR_IS_SIGNED_COMPILED variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMake/vtkTestCharSignedness.cxx
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1405517398-VTK_TYPE_CHAR_IS_SIGNED
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMake/vtkTestTypes.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMakeLists.txt

SET( VTK_TYPE_CHAR_IS_SIGNED
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)


# VTK_ANSI_STREAM_EOF_RESULT
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VTK_ANSI_STREAM_EOF_RESULT to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The VTK_ANSI_STREAM_EOF_COMPILED variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/VTK/CMake/vtkTestStreamEOF.cxx
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1334118770-VTK_ANSI_STREAM_EOF_RESULT
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMake/vtkTestStreamsLibrary.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/CMakeLists.txt

SET( VTK_ANSI_STREAM_EOF_RESULT
     "126"
     CACHE STRING "Result from TRY_RUN" FORCE)


# KWSYS_LFS_WORKS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set KWSYS_LFS_WORKS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# KWSYS_LFS_WORKS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set KWSYS_LFS_WORKS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The KWSYS_LFS_WORKS_COMPILED variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/Utilities/KWSys/vtksys/kwsysPlatformTestsCXX.cxx
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1106291758-KWSYS_LFS_WORKS
# Run arguments :
#    Called from: [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/Utilities/KWSys/vtksys/CMakeLists.txt

SET( KWSYS_LFS_WORKS
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( KWSYS_LFS_WORKS__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# KWSYS_CHAR_IS_SIGNED
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set KWSYS_CHAR_IS_SIGNED to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# KWSYS_CHAR_IS_SIGNED__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set KWSYS_CHAR_IS_SIGNED__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The KWSYS_CHAR_IS_SIGNED_COMPILED variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/Utilities/KWSys/vtksys/kwsysPlatformTestsCXX.cxx
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec2126959682-KWSYS_CHAR_IS_SIGNED
# Run arguments :
#    Called from: [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/Utilities/KWSys/vtksys/CMakeLists.txt

SET( KWSYS_CHAR_IS_SIGNED
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( KWSYS_CHAR_IS_SIGNED__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# HDF5_PRINTF_LL_TEST_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HDF5_PRINTF_LL_TEST_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HDF5_PRINTF_LL_TEST_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/HDF5Tests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec425874690-HDF5_PRINTF_LL_TEST_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( HDF5_PRINTF_LL_TEST_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_INTEGER_WORKS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_INTEGER_WORKS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_INTEGER_WORKS_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec2967780343-H5_LDOUBLE_TO_INTEGER_WORKS_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_LDOUBLE_TO_INTEGER_WORKS_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULONG_TO_FLOAT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULONG_TO_FLOAT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULONG_TO_FLOAT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1088445225-H5_ULONG_TO_FLOAT_ACCURATE_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_ULONG_TO_FLOAT_ACCURATE_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec823426501-H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_ULLONG_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_ULLONG_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_ULLONG_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1274287184-H5_FP_TO_ULLONG_ACCURATE_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_FP_TO_ULLONG_ACCURATE_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_ULLONG_RIGHT_MAXIMUM_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec382956386-H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_UINT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_UINT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_UINT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec584875315-H5_LDOUBLE_TO_UINT_ACCURATE_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_LDOUBLE_TO_UINT_ACCURATE_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULLONG_TO_LDOUBLE_PRECISION_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULLONG_TO_LDOUBLE_PRECISION_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULLONG_TO_LDOUBLE_PRECISION_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec2856756294-H5_ULLONG_TO_LDOUBLE_PRECISION_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_ULLONG_TO_LDOUBLE_PRECISION_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_INTEGER_OVERFLOW_WORKS_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec1001084337-H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_LLONG_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_LLONG_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_LLONG_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec3888391708-H5_LDOUBLE_TO_LLONG_ACCURATE_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_LDOUBLE_TO_LLONG_ACCURATE_RUN
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LLONG_TO_LDOUBLE_CORRECT_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LLONG_TO_LDOUBLE_CORRECT_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LLONG_TO_LDOUBLE_CORRECT_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec9683822-H5_LLONG_TO_LDOUBLE_CORRECT_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_LLONG_TO_LDOUBLE_CORRECT_RUN
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_NO_ALIGNMENT_RESTRICTIONS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_NO_ALIGNMENT_RESTRICTIONS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_NO_ALIGNMENT_RESTRICTIONS_COMPILE variable holds the build result for this TRY_RUN().
#
# Source file   : /projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/Resources/ConversionTests.c
# Executable    : /projects/pvdev/mira/crossgnu5/paraview/src/paraview-build/CMakeFiles/cmTryCompileExec520949017-H5_NO_ALIGNMENT_RESTRICTIONS_RUN
# Run arguments :
#    Called from: [2]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/ConfigureChecks.cmake
#                 [1]	/projects/pvdev/mira/crossgnu5/paraview/src/paraview/VTK/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt

SET( H5_NO_ALIGNMENT_RESTRICTIONS_RUN
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)
